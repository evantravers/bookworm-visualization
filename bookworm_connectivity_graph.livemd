# Bookworm Connectivity Graph

```elixir
Mix.install([
  {:req, "~> 0.3.0"},
  {:floki, "~> 0.34.0"},
  {:kino_explorer, "~> 0.1.4"},
  {:libgraph, "~> 0.16.0"}
])
```

## 🤔 Why?

[Bookworm](https://bookworm.fm/) is one of my favorite podcasts. Like many listeners I use it as a filter to find quality books to add to my queue. I love how the hosts don't just read but engage with the material, holding each other accountable with takeaways and challenges.

A recurring joke in Bookworm is how many times they refer to [Ep. 42, How To Read a Book by Mortimer Adler](https://bookworm.fm/42/). The last few times they've made that joke I've wanted to actually visualize that graph. I know Mike loves Obsidian, I love Elixir and have been learning [Livebook](https://livebook.dev/)… let's play!

## 🎣 Scraping

The first thing is to scrape the pages for processing and evaluation. One lovely thing about Livebook is that if you structure each code block separately, it intelligently memoizes each variable and only re-evaluates them if the structure changes.

Previously, I had used [HTTPoison](https://github.com/edgurgel/httpoison) to do some downloading, but my friend [Seth](http://megalithic.io) has recommended [Req](https://github.com/wojtekmach/req), so let's give that a whirl.

Adding the following to the setup:

<!-- livebook:{"force_markdown":true} -->

```elixir
Mix.install([
  {:req, "~> 0.3.0"}
])
```

Now I can see if I can hit the opening page:

```elixir
Req.get!("https://bookworm.fm/").body
```

Success! Let's be a little more intentional.

Bookworm's website is structured logically. Every episode will be in the form `https://bookworm.fm/1/` up to `https://bookworm.fm/<current>/`. The most recent post is the top `<h2>` on the page.

I tried adding the [req_easyhtml](https://github.com/wojtekmach/req_easyhtml) plugin, but discovered that the way it wrapped Floki just made it hard for me to pass documents and fragments through a `|>` chain, so I dropped in favor of Floki.

<!-- livebook:{"break_markdown":true} -->

Now I can hone the CSS selector I need to get the most current link. What's really nice (again) about Livebook is that as I rerun the code over and over… I'm not pummeling my internet friends' server with requests. Livebook's cells have localized and memoized all the variables.

```elixir
most_recent_episode_number =
  Req.get!(url: "https://bookworm.fm/").body
  |> Floki.parse_document!()
  |> Floki.find("h2 a")
  |> List.first()
  |> Floki.attribute("href")
  |> List.first()
  |> String.split("/", trim: true)
  |> List.last()
  |> String.to_integer()
```

☝️ This is a super gross way to do this, but I can fix it later.

Anyway. Excelsior!

```elixir
raw_episodes =
  Enum.map(1..most_recent_episode_number, fn num ->
    url = "https://bookworm.fm/#{num}/"

    %{
      # going to be important later! (basically the private key for the episode)
      url: url,
      request: Req.get!(url: url)
    }
  end)
```

The first time I tried this, I forgot the trailing slash at the end of the URL and was getting tons of redirects (I'm guessing to the URI with the trailing slash.) 🤷

Let's do some cleanup on this… we don't care about all the html, just the bit inside the main area.

```elixir
episodes =
  raw_episodes
  |> Enum.map(fn %{request: request} = episode ->
    floki_article =
      request.body
      |> Floki.parse_fragment!()
      |> Floki.find("article")

    links =
      floki_article
      |> Floki.find("a")
      |> Enum.map(fn link ->
        link
        |> Floki.attribute("href")
        |> List.first()
      end)

    title =
      floki_article
      |> Floki.find("h1")
      |> Floki.text()

    published =
      floki_article
      |> Floki.find(".entry-time")
      |> Floki.attribute("datetime")
      |> List.first()
      |> DateTime.from_iso8601()
      # TODO: this should be a `with` block
      |> elem(1)

    episode
    |> Map.put(:floki_article, floki_article)
    |> Map.put(:article, Floki.text(floki_article, sep: " "))
    |> Map.put(:links, links)
    |> Map.put(:title, title)
    |> Map.put(:published, published)
  end)
```

Everytime I create one of these tiny blocks, it feels wrong to my DRY-trained programming brain, but I know from experience with Livebooks that it rewards little iterative steps.

I've thought of a several different things I want to do with this:

* a table of "most linked to episodes"
* a graph showing all the links
* transformation to markdown notes that could be stuck in someone's (*cough* Mike *cough*) Obsidian.

Let's go!

## 🗺️ Graphs and Maps

I thought that the first thing I'm going to need to do is to transform this list of raw bodies into something that we can actually work with and display as a table.

I started to add a Smart Cell Data Explorer, which will automatically add dependencies for all it's plugins and things… but I'm running into it freaking out over the EasyHTML/Floki structs... let's go for the throat and try the graph.

I've done this before for [Advent of Code](https://adventofcode.com), so excuse the magic… 🧙

```elixir
graph =
  episodes
  |> Enum.reduce(Graph.new(), fn %{url: url, links: links, title: title}, g ->
    links
    |> Enum.reduce(g, fn link, g ->
      Graph.add_edge(g, url, link)
    end)
    |> Graph.label_vertex(url, title)
  end)
```

Hey presto, we have a Graph object! We can now run lots of algorithms on the graph, see strongly connected components, find backlinks, all that good stuff.

But now we need to display it… the naive way with Graphviz!

LibGraph supplies a `Graph.to_dot/1` method that graphviz can read:

```elixir
dot_output = elem(Graph.to_dot(graph), 1)

IO.puts(dot_output)
```

Ordinarily we could paste that into something like [Graphviz Online](https://dreampuf.github.io/GraphvizOnline) and we'd be done, but Mike and Joe have linked a _lot_ of links.

Let's output a file for safekeeping.

```elixir
File.write!("#{__DIR__}/images/output.dot", dot_output)
```

The `output.dot` file is understandable by Graphviz tooling:

```elixir
System.shell(
  "/opt/homebrew/bin/sfdp -Tpng #{__DIR__}/images/output.dot > #{__DIR__}/images/graph.png"
)
```

This whole bit takes a long time… there's a lot of edges.

I spent some time staring at the initial visualization and realized a few things would need to e straightened up above:

* [ ] I need to filter out some really common noisy URLs, like libsyn and iTunes.
* [X] I needed to get the episode title or name of the book to label those nodes, maybe set them apart visually.

Normally I'd just keep working "down" the workbook, but to save on network calls it's easier to get the title when I'm doing the `Req.get!`.

<!-- livebook:{"continue_on_error":true} -->

```elixir
filtered_graph =
  episodes
  |> Enum.map(fn %{links: links} = ep ->
    Map.put(
      ep,
      :links,
      links
      # one domain
      |> Enum.filter(&String.match?(&1, ~r/^https:\/\/bookworm\.fm/))
    )
  end)
  |> Enum.reduce(Graph.new(), fn %{url: url, links: links, title: title}, g ->
    links
    |> Enum.reduce(g, fn link, g ->
      Graph.add_edge(g, url, link)
    end)
    |> Graph.label_vertex(url, title)
  end)
```

Let's see if that filtering creates a better graphviz image…

```elixir
File.write!("#{__DIR__}/images/output2.dot", elem(Graph.to_dot(filtered_graph), 1))

System.shell(
  "/opt/homebrew/bin/sfdp -Tpng #{__DIR__}/images/output2.dot > #{__DIR__}/images/filtered.png"
)
```

Better… somewhere I had to cut the code for labeling the bookworm vertices, unsure why that broke. Once again, I'm sure I could pass some better options to graphviz to emulate Obsidian… orrrrr…

## Markdown for Obsidian

I decided to shift course and try a straightforward and explorable visualization: use [Obsidian](https://obsidian.md) to visualize the connections.

```elixir
System.cmd("rm", ["--rf", "#{__DIR__}/episodes"])
System.cmd("mkdir", ["#{__DIR__}/episodes"])

map =
  episodes
  |> Enum.map(fn %{url: url, title: title} -> {url, String.replace(title, ":", "-")} end)
  |> Map.new()

episodes
|> Enum.map(fn %{title: title, links: links, article: article} ->
  safe_title = String.replace(title, ":", "-")

  content = """
  # #{title}

  #{article}

  ## Mentions:
  #{Enum.reduce(links, ~c"", fn link, str -> "#{str}\n- [[#{Map.get(map, link, link)}]]" end)}
  """

  File.write!("#{__DIR__}/episodes/#{safe_title}.md", content)
end)
```

This creates a folder called `episodes` wherever the `.livemd` file lives. Open that folder as a vault in Obsidian, and you'll get something like this:

<!-- livebook:{"break_markdown":true} -->

![](images/obsidian_graph.png)

<!-- livebook:{"break_markdown":true} -->

That's pretty good… but let's set up some data science-y stuff.

## ⚗️ Data

Let's quickly build a list of `Map` objects that Livebook's Explorer Dataframes can understand. We'll use a Graph function on the graph object we built earlier in the workbook to find the number of vertices (links) that have an edge to the current episode… essentially how many "backlinks."

```elixir
backlinks =
  episodes
  |> Enum.map(fn %{title: title, url: url, published: published} ->
    %{
      title: title,
      published: DateTime.to_iso8601(published),
      url: url,
      backlinks: Graph.in_edges(graph, url) |> Enum.count()
    }
  end)
```

<!-- livebook:{"attrs":"","chunks":null,"kind":"Elixir.KinoExplorer.DataTransformCell","livebook_object":"smart_cell"} -->

```elixir
require Explorer.DataFrame
backlinks |> Explorer.DataFrame.new()
```

👏👏👏

Already some interesting insights on there… but there's so much to explore:

* Could we see this plotted over a timeline?
* Do references have a half-life, or do some books ring eternal in Mike and Joe's ears?
* How does the episode book score relate to the number of backlinks in the future?

## References

* https://hexdocs.pm/floki/Floki.html
* https://hexdocs.pm/libgraph/Graph.html
